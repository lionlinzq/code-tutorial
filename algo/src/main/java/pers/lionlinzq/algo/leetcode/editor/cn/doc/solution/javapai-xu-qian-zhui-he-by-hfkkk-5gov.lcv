# 思路

这道题让我们求出拿出最小数目的魔法豆，举个例子，我们最终确定每个袋子中需要保留的魔法豆的数量是x，假设当前这个袋子中魔法豆的数量是t，那么t就分为两种情况，一种情况是 $$ t >= x $$，此时，我们需要拿出 $$ t - x $$个魔法豆，另外一种情况是 $$ t < x $$，由于无法向袋子中添加魔法豆，所以我们只能将这个袋子拿空，从而使得当前袋子满足题目的条件。
综上所述，我们可以列出一个方程:
$$
ans =
\begin{cases}
t - x &,t >= x\\
t& ,t < x
\end{cases}
$$

# 解题方法

在具体实现的时候，我们可以直接遍历整个数组，用当前的t作为x，从而求出所有的答案，最终取最小值就好，但是这样由于数组长度太大，会导致超时，所以可以考虑使用前缀和进行加速，前缀和可以快速的求出数组中一段范围的和，但是在这道题中使用前缀和有一个要求，就是需要将数组排序，这样才能保证当我们遍历到某个位置时，前面的元素都是比他小的，后面的元素都是比他大的。
最终在套用上面的公式即可，即当我们遍历到某个位置时，它前面的所有袋子中的魔法豆全部需要拿出，它后面的都拿到与他袋子中的魔法豆数量相同。总结成公式即：

$$ ans = sum[i - 1] +(sum[n] - sum[i] - (n - i) * x)$$

需要注意的一点是，代码中的所有涉及计算的变量都需要是long型，否则可能会超范围。

# Code

* []

```Java
class Solution {
    public long minimumRemoval(int[] beans) {
        int n = beans.length;
        Arrays.sort(beans);
        long[] sum = new long[n + 1];
        long ans = Long.MAX_VALUE;
        for(int i = 1;i <= n;i++){
            sum[i] = sum[i - 1] + (long)beans[i - 1];
        }
        for(int i = 1;i <= n;i++){
            long x = (long) beans[i - 1];
            long t = sum[i - 1] + (sum[n] - sum[i] - (long)(n - i) * x);
            ans = Math.min(ans,t);
        }
        return ans;
    }
}
```

